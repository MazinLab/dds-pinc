// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dds_pinc_dds_pinc,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu48dr-fsvg1517-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.000000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=52,HLS_SYN_LUT=83,HLS_VERSION=2023_1}" *)

module dds_pinc (
        ap_clk,
        ap_rst_n,
        pinc_out_TDATA,
        pinc_out_TVALID,
        pinc_out_TREADY,
        pinc_out_TKEEP,
        pinc_out_TSTRB,
        pinc_out_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [15:0] pinc_out_TDATA;
output   pinc_out_TVALID;
input   pinc_out_TREADY;
output  [1:0] pinc_out_TKEEP;
output  [1:0] pinc_out_TSTRB;
output  [0:0] pinc_out_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [13:0] pinc_in;
reg    pinc_out_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    regslice_both_pinc_out_V_data_V_U_apdone_blk;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [15:0] pinc_out_TDATA_int_regslice;
reg    pinc_out_TVALID_int_regslice;
wire    pinc_out_TREADY_int_regslice;
wire    regslice_both_pinc_out_V_data_V_U_vld_out;
wire    regslice_both_pinc_out_V_keep_V_U_apdone_blk;
wire    regslice_both_pinc_out_V_keep_V_U_ack_in_dummy;
wire    regslice_both_pinc_out_V_keep_V_U_vld_out;
wire    regslice_both_pinc_out_V_strb_V_U_apdone_blk;
wire    regslice_both_pinc_out_V_strb_V_U_ack_in_dummy;
wire    regslice_both_pinc_out_V_strb_V_U_vld_out;
wire    regslice_both_pinc_out_V_last_V_U_apdone_blk;
wire    regslice_both_pinc_out_V_last_V_U_ack_in_dummy;
wire    regslice_both_pinc_out_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

dds_pinc_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .pinc_in(pinc_in)
);

dds_pinc_regslice_both #(
    .DataWidth( 16 ))
regslice_both_pinc_out_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pinc_out_TDATA_int_regslice),
    .vld_in(pinc_out_TVALID_int_regslice),
    .ack_in(pinc_out_TREADY_int_regslice),
    .data_out(pinc_out_TDATA),
    .vld_out(regslice_both_pinc_out_V_data_V_U_vld_out),
    .ack_out(pinc_out_TREADY),
    .apdone_blk(regslice_both_pinc_out_V_data_V_U_apdone_blk)
);

dds_pinc_regslice_both #(
    .DataWidth( 2 ))
regslice_both_pinc_out_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(2'd0),
    .vld_in(pinc_out_TVALID_int_regslice),
    .ack_in(regslice_both_pinc_out_V_keep_V_U_ack_in_dummy),
    .data_out(pinc_out_TKEEP),
    .vld_out(regslice_both_pinc_out_V_keep_V_U_vld_out),
    .ack_out(pinc_out_TREADY),
    .apdone_blk(regslice_both_pinc_out_V_keep_V_U_apdone_blk)
);

dds_pinc_regslice_both #(
    .DataWidth( 2 ))
regslice_both_pinc_out_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(2'd0),
    .vld_in(pinc_out_TVALID_int_regslice),
    .ack_in(regslice_both_pinc_out_V_strb_V_U_ack_in_dummy),
    .data_out(pinc_out_TSTRB),
    .vld_out(regslice_both_pinc_out_V_strb_V_U_vld_out),
    .ack_out(pinc_out_TREADY),
    .apdone_blk(regslice_both_pinc_out_V_strb_V_U_apdone_blk)
);

dds_pinc_regslice_both #(
    .DataWidth( 1 ))
regslice_both_pinc_out_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(pinc_out_TVALID_int_regslice),
    .ack_in(regslice_both_pinc_out_V_last_V_U_ack_in_dummy),
    .data_out(pinc_out_TLAST),
    .vld_out(regslice_both_pinc_out_V_last_V_U_vld_out),
    .ack_out(pinc_out_TREADY),
    .apdone_blk(regslice_both_pinc_out_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        pinc_out_TDATA_blk_n = pinc_out_TREADY_int_regslice;
    end else begin
        pinc_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pinc_out_TVALID_int_regslice = 1'b1;
    end else begin
        pinc_out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_pinc_out_V_data_V_U_apdone_blk == 1'b1) | (pinc_out_TREADY_int_regslice == 1'b0))) | ((1'b1 == 1'b1) & (pinc_out_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_pinc_out_V_data_V_U_apdone_blk == 1'b1) | (pinc_out_TREADY_int_regslice == 1'b0))) | ((1'b1 == 1'b1) & (pinc_out_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_pinc_out_V_data_V_U_apdone_blk == 1'b1) | (pinc_out_TREADY_int_regslice == 1'b0))) | ((1'b1 == 1'b1) & (pinc_out_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (pinc_out_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((regslice_both_pinc_out_V_data_V_U_apdone_blk == 1'b1) | (pinc_out_TREADY_int_regslice == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign pinc_out_TDATA_int_regslice = pinc_in;

assign pinc_out_TVALID = regslice_both_pinc_out_V_data_V_U_vld_out;


reg find_kernel_block = 0;
// synthesis translate_off
`include "dds_pinc_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //dds_pinc

